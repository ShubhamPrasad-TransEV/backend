generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  username      String?         @unique @db.VarChar(255)
  email         String?         @unique @db.VarChar(255)
  password      String?         @db.VarChar(255)
  phoneNumber   String?         @db.VarChar(20)
  isSeller      Boolean         @default(false)
  seller        Seller?
  companyName   String?         @db.VarChar(255)
  contactPerson String?         @db.VarChar(255)
  addresses     Address[]
  roleId        Int?            @default(2)
  aboutUs       String?         @db.Text
  logo          String?         @db.VarChar(255)
  role          Role?           @relation(fields: [roleId], references: [id])
  orders        Order[]
  resets        PasswordReset[]
  cartItems     CartItem[]
  Admins        Admins?
  Wishlist      Wishlist[]
  description   String?
  cart          Cart[]
  Reviews       Reviews[]
  SupportTicket SupportTicket[]

  @@index([username, email])
}

model Address {
  id             String  @unique @default(uuid())
  identifier     String // e.g., 'Home', 'Office'
  address        String // Full address
  defaultAddress Boolean @default(false) // To mark the default address
  userId         Int // Foreign key linking to User
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, identifier]) // Ensure unique identifier per user
}

model Seller {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [id], references: [id], onDelete: Cascade)
  aboutUs       String?        @db.VarChar(255)
  logo          String?        @db.VarChar(255)
  products      Product[] // Products are now tied to Sellers, not Users
  notifications Notification[]
  Order         Order[] // Sellers handle multiple orders through their products
}

model Admins {
  id                  Int                   @id @default(autoincrement()) // Autoincrementing primary key
  adminId             Int // This will reference the User model where roleId = 1
  admin               User                  @relation(fields: [adminId], references: [id], onDelete: Cascade) // Foreign key relationship to User
  adminSettings       AdminSettings[]
  operationalSettings OperationalSettings[]

  @@unique([adminId]) // Ensure that a user can only appear once in the Admins table
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String? @unique @db.VarChar(255)
  users User[]
}

model Product {
  id                 String             @id @default(uuid())
  name               String?            @db.VarChar(255)
  price              Float?
  sellerId           Int
  seller             Seller             @relation(fields: [sellerId], references: [id]) // Product is associated with a Seller
  images             Image[]
  cartItems          CartItem[]
  categories         Category[]         @relation("ProductCategories")
  productDetails     Json
  description        String             @db.VarChar(255)
  Wishlist           Wishlist[]
  quantity           Int?               @default(1)
  Unit               Unit[]
  cart               Cart[]
  mostlysearched     MostlySearched[]
  mostlyViewed       mostlyViewed?
  mostwishlisted     mostlyWishlisted[]
  Reviews            Reviews[]
  offersAsBuyProduct Offer[]            @relation("BuyProductRelation")
  offersAsGetProduct Offer[]            @relation("GetProductRelation") // Relation for offers providing this product as free

  @@index([sellerId])
}

model quantitymanagement {
  id                  String   @id @default(uuid())
  currentquantity     Int?
  afterupdatequantity Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Unit {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  user                   User      @relation(fields: [userId], references: [id])
  address                String    @default("")
  orderedItems           Json? // JSON format to store {productId: quantity}
  shipmentCompany        String?
  shipmentRequestStatus  String?
  shipmentStatus         String?   @default("Pending") // Possible values: "Pending", "Shipped", "Delivered"
  invoice                String? // Invoice number or reference (Location)
  refundStatus           String?   @default("No Refund") // Possible values: "No Refund", "Refunded", "Partially Refunded"
  refundDetails          String?
  shippingCost           Float?    @default(0.0) // Shipping cost associated with the order
  totalOrderCost         Float?    @default(0.0)
  totalItemCost          Float?    @default(0.0)
  orderingStatus         String?   @default("Pending") // Possible values: "Pending", "Completed", "Cancelled"
  orderFulfillmentStatus String?   @default("Unfulfilled") // Possible values: "Unfulfilled", "Fulfilled"
  prePayment             Boolean   @default(false) // Indicates if pre-payment was made
  paymentStatus          Boolean   @default(false) // Indicates if the order has been fully paid
  Seller                 Seller?   @relation(fields: [sellerId], references: [id])
  sellerId               Int?
  orderedAt              DateTime  @default(now()) // Timestamp when the order was placed
  orderFulfilledAt       DateTime? // Timestamp when the order was fulfilled (can be null)

  // Inventory Inventory[]

  @@index([userId])
}

model Offer {
  id            String    @id @default(uuid())
  name          String?
  type          OfferType // Type of the offer (e.g., Buy N of X, Get M of Y Free or Discounted)
  buyQuantity   Int? // Quantity to buy to activate the offer (N)
  getQuantity   Int? // Quantity to get as part of the offer (M)
  discount      Float? // Discount percentage for discounted offers
  buyProduct    Product?  @relation("BuyProductRelation", fields: [buyProductId], references: [id])
  buyProductId  String? // Specific product that needs to be bought
  buyCategory   Category? @relation("BuyCategoryRelation", fields: [buyCategoryId], references: [id])
  buyCategoryId Int? // Category that needs to be bought (optional)
  getProduct    Product?  @relation("GetProductRelation", fields: [getProductId], references: [id])
  getProductId  String? // Specific product to get for free or discounted (optional)
  getCategory   Category? @relation("GetCategoryRelation", fields: [getCategoryId], references: [id])
  getCategoryId Int? // Category to get for free or discounted (optional)
  validFrom     DateTime // Offer start date
  validUntil    DateTime // Offer end date
  sellerId      Int // Seller creating the offer
  description   String?   @db.Text // Description of the offer

  @@index([sellerId])
}

enum OfferType {
  BUY_N_GET_M_FREE_PRODUCT
  BUY_N_GET_M_FREE_CATEGORY
  BUY_N_GET_M_DISCOUNT_PRODUCT
  BUY_N_GET_M_DISCOUNT_CATEGORY
  FLAT_DISCOUNT_PRODUCT
  FLAT_DISCOUNT_CATEGORY
  SIMPLE_FLAT_DISCOUNT
}

model Image {
  id        Int     @id @default(autoincrement())
  filename  String? @db.VarChar(255)
  path      String? @db.VarChar(255)
  productId String  @db.VarChar(255)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Relation to Product
}

model CartItem {
  id        Int     @id @default(autoincrement())
  sellerId  Int
  productId String  @db.VarChar(255)
  quantity  Int     @default(1)
  user      User    @relation(fields: [sellerId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String?  @db.VarChar(255)
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([otp])
}

model Category {
  id                  Int        @id @default(autoincrement())
  name                String?    @unique @db.VarChar(255)
  parentCategories    Category[] @relation("CategoryParentChild")
  childCategories     Category[] @relation("CategoryParentChild")
  products            Product[]  @relation("ProductCategories")
  offersAsBuyCategory Offer[]    @relation("BuyCategoryRelation") // Opposite relation for buyCategory in Offer
  offersAsGetCategory Offer[]    @relation("GetCategoryRelation") // Opposite relation for getCategory in Offer
}

model Notification {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  message   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  logo        String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  email       String?  @unique @db.VarChar(255)
  phoneNumber String?  @db.VarChar(255)
  aboutUs     String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminSettings {
  id          Int     @id @default(autoincrement()) // Autoincrementing primary key
  siteName    String? @db.VarChar(255)
  siteLogo    String? @db.VarChar(255)
  siteAddress String? @db.VarChar(255)
  siteEmail   String? @db.VarChar(255)
  storePhone  String? @db.VarChar(255)
  adminId     Int     @unique // Foreign key that references the Admins table
  admin       Admins  @relation(fields: [adminId], references: [adminId], onDelete: Cascade) // Relationship to Admins
}

model OperationalSettings {
  adminId               Int     @id @unique // This ensures each admin can have only one operational settings entry
  admin                 Admins  @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
  timeZone              String? @db.VarChar(255)
  currency              String? @db.VarChar(255)
  taxRate               Float?
  freeShippingThreshold Float?
  orderProcessingTime   Int?
  facebook              String? @default("")
  instagram             String? @default("")
  twitter               String? @default("")
  minimumOrderAmount    Float?
  backupFrequency       String? @default("")
}

model Wishlist {
  userId    Int
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId]) // Composite primary key to ensure uniqueness
}

model Cart {
  userId    Int
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, productId]) // Composite primary key to ensure uniqueness
}

model MostlySearched {
  id             Int      @id @default(autoincrement())
  productid      String?  @unique
  product        Product? @relation(fields: [productid], references: [id], onDelete: Cascade)
  numberofsearch Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// model Inventory{
//    id          Int      @id @default(autoincrement())
//   orderinventory Json?
//   orderid Int
//   orderdetails Order @relation(fields: [orderid],references: [id],onDelete: Cascade)
// }


model mostlyViewed {
  productId String  @id @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  views     Int     @default(1)
}

model mostlyWishlisted {
  productId               String  @id @unique
  product                 Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  numberOfTimesWishlisted Int     @default(1)
}

model Reviews {
  id              String  @id @unique @default(uuid())
  userId          Int
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  review          String? @db.VarChar(5000)
  ratings         Float
  deliveryRatings Float?
  dispatchRatings Float?
}

model SupportTicket {
  id        String   @id @default(uuid()) // UUID for Support Ticket Number
  subject   String   @db.VarChar(255)
  details   String   @db.Text
  status    Status   @default(UNOPENED)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



enum Status {
  UNOPENED
  IN_PROGRESS
  RESOLVED
  ESCALATED
}
