generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  username      String          @unique @db.VarChar(50)
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar(255)
  phoneNumber   String?         @db.VarChar(15)
  isSeller      Boolean         @default(false)
  companyName   String?         @db.VarChar(100)
  description   String?         @db.Text
  contactPerson String?         @db.VarChar(100)
  address       String?         @db.Text
  roleId        Int?
  aboutUs       String?         @db.Text
  logo          String?         @db.VarChar(255)
  role          Role?           @relation(fields: [roleId], references: [id])
  orders        Order[]
  resets        PasswordReset[]
  cartItems     CartItem[]
  products      Product[]       @relation("UserProducts")
  Admins        Admins?

  @@index([username, email])
}

model Seller {
  id            Int            @id @default(autoincrement())
  products      Product[]
  notifications Notification[]
  orders        Order[]        @relation("SellerOrders")
}

model Admins {
  id                  Int                   @id @default(autoincrement())
  adminId             Int
  admin               User                  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminSettings       AdminSettings[]
  operationalSettings OperationalSettings[]

  @@unique([adminId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Product {
  id                  Int         @id @default(autoincrement())
  mainCategory        String
  subCategory         String
  nestedSubCategory   String
  name                String
  price               Float
  description         String
  userId              Int
  user                User        @relation("UserProducts", fields: [userId], references: [id])
  images              Image[]     @relation("ProductImages") // Correct relation to Image
  sellerId            Int
  seller              Seller      @relation(fields: [sellerId], references: [id])
  orderItems          OrderItem[]
  cartItems           CartItem[]
}

model Order {
  id                     Int         @id @default(autoincrement())
  userId                 Int
  user                   User        @relation(fields: [userId], references: [id])
  orderItems             OrderItem[]
  shipmentStatus         String      @default("Pending")
  invoice                String?
  refundStatus           String      @default("No Refund")
  shippingCost           Float       @default(0.0)
  orderingStatus         String      @default("Pending")
  orderFulfillmentStatus String      @default("Unfulfilled")
  prePayment             Boolean     @default(false)
  paymentStatus          Boolean     @default(false)
  sellerId               Int?
  Seller                 Seller?     @relation("SellerOrders", fields: [sellerId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Image {
  id        Int    @id @default(autoincrement())
  filename  String
  url       String
  data      Bytes
  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id]) // Correct relation to Product
}

model CartItem {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([otp])
}

model Category {
  id                  Int        @id @default(autoincrement())
  name                String     @unique
  categoryParentId    Int?
  categoryParent      Category?  @relation("CategoryHierarchy", fields: [categoryParentId], references: [id], onDelete: SetNull)
  subcategoryParentId Int?
  subcategoryParent   Category?  @relation("SubcategoryHierarchy", fields: [subcategoryParentId], references: [id], onDelete: SetNull)
  subcategories       Category[] @relation("CategoryHierarchy")
  nestedSubcategories Category[] @relation("SubcategoryHierarchy")
}

model Notification {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String
  logo        String?
  address     String
  email       String   @unique
  phoneNumber String
  aboutUs     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model AdminSettings {
  id          Int    @id @default(autoincrement())
  siteName    String
  siteLogo    String?
  siteAddress String
  siteEmail   String
  storePhone  String
  adminId     Int    @unique
  admin       Admins @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
}

model OperationalSettings {
  id                    Int     @id @default(autoincrement())
  adminId               Int     @unique
  admin                 Admins  @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
  timeZone              String
  currency              String
  taxRate               Float
  freeShippingThreshold Float
  orderProcessingTime   Int
  facebook              String? @default("")
  instagram             String? @default("")
  twitter               String? @default("")
  minimumOrderAmount    Float
  backupFrequency       String? @default("")
}
